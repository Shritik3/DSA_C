// Question 1:
// (1281)
// class Solution {
// public:
//     int subtractProductAndSum(int n) {
//         int r=0,s=0,p=1;
//         while(n!=0){
//             r=n%10;
//             s=s+r;
//             p=p*r;
//             n=n/10;
//         }
//         int f=0;
//         f=p-s;
//         return f;
//     }
// };



// Question 2:
// 191
// class Solution {
// public:
//     int hammingWeight(uint32_t n) {
        // cout<<n<<endl;
        // return 0;
        // int c=0;
        // while(n!=0){
//             check last bit
//             n&1 =1
    //         if(n&1){
    //             c=c+1;
    //         }
    //         n=n>>1;
    //     }
    //     return c;
        
    // }



//     Question 3:
// 9
// class Solution {
// public:
//     int reverse(int x) {
//         int ans=0;
// //             integer has minimum range
//             while(x!=0){
//                 int digit=x%10;
//                 if((ans>INT_MAX/10)||(ans<INT_MIN/10)){
//                    return 0; 
//                 }
//                 ans=(ans*10)+digit;
//                 x=x/10;
//             }
//             return ans;
//     }
// };



//     Question 4:
// 1091
// class Solution {
// public:
//     int bitwiseComplement(int n) {
//         int m=n;
//         int mask=0;
// //         edge case
//         if(n==0){
//             return 1;
//         }
//         while(m!=0){
//             // to add on right sides in till the place last one in n is present 
//             mask=(mask << 1)|1;
//             m=m >> 1;
//         }
        
// //         to  make the ans 1 when used AND op
//         int ans=(~n) & mask;
//         return ans;
//     }
// };


//     Question 5:
// 231
// class Solution {
// public:
//     bool isPowerOfTwo(int n) {
// //         acc to constraint 2^(31-1)
//         for(int i = 0; i <= 30; i++)
//         {
//             int p = pow(2,i);
//             if(p == n)
//             {
//             return true;   
//             }
//         }
//         return false;
//     }
// };

// Another aproach

// class Solution {
// public:
//     bool isPowerOfTwo(int n) {
// //         acc to constraint 2^(31-1)
//         int p=1;
//         for(int i = 0; i <= 30; i++)
//         {
//             int p = pow(2,i);
//             if(p == n)
//             {
//             return true;   
//             }
//             if(ans<INT_MAX/2){
//                 p=p*2;
//             }
            
//         }
//         return false;
//     }
// };


// Code studio
// Find unique
// int findUnique(int *arr, int size)
// {
//     //Write your code here
// //     (2m+1) 2 m means some elements are present twice and one appears once
// //     if on two elements we use XOR the output is zero
//     int ans=0;
//     for(int i=0;i<size;i++){
//         ans=ans^arr[i];
//     }
//     return ans;
    
// }

// Leetcode
// 1091
// class Solution {
// public:
//     bool uniqueOccurrences(vector<int>& arr) {
//         int freq[2000]={0};
//         for(auto i=arr.begin();i!=arr.end();i++){
// // 1000 +to make negative index count
//             // cout<<freq[1000+*(i)]++;
//             freq[1000+*(i)]++;
//         }
// //         to compare if next elements are similar or not
//         sort(freq,freq+2000);
//      for(int i = 0 ; i<1999;i++){
//          if(freq[i]==0){
//              continue;
//          }else{
//              if(freq[i]==freq[i+1]){
//                  return false;
//              }
//          }
//      }
//         return true;
//     }
// };



// Code studio
// Duplicate in array
// int findDuplicate(vector<int> &arr) 
// {
//     // Write your code here
// 	//         vector is dynamic we can add more spaces later
//         int ans=0;
// //     to get all the single ele ments in array
//         for(int i=0;i<arr.size();i++){
//             ans=ans^arr[i];
//         }
// //  after having all the single elements we do XOR with i to get the duplicate 
//         for(int i=0;i<arr.size();i++){
//             ans=ans^i;
//         }
//         return ans;
// }



// Leetcode
// 442
// class Solution {
// public:
//     vector<int> findDuplicates(vector<int>& nums) {
//     vector<int>m;
        
//     sort(nums.begin(),nums.end());
        
//     for(int i=0;i<(nums.size()-1);i++){
        
//     if(nums[i]==nums[i+1]){
//     // to add elemnts in the last
//     m.push_back(nums[i]);
        
//     }
//     }
//     return m;
//     }
// };


// CodeStudio
// Intersection of two sorted arrays
// vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
// {
// 	// Write your code here.
//     vector<int>ans;
//     for(int i=0;i<n;i++){
//         int el1=arr1[i];
//         for(int j=0;j<m;j++){
//             if(el1<arr2[j])
//                 break;
//             if(el1==arr2[j]){
//                 ans.push_back(el1);
//                 arr2[j]=-123243;
//                 break;
                
//             }
//         }
//     }
//     return ans;
// }


// vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m)
// {
// 	// Write your code here.
//     int i=0,j=0;
// //     arrays are sorted in ascending order
// //     two pointer approach
//     vector<int>ans;
//     while((i<n)&&(j<m{
//         if(arr1[i]==arr2[j]){
//             ans.push_back(arr[i]);
//             i++;
//             j++;
//         }
//         else if(arr1[i]<arr[j]){
//             i++;
//         }
//         else{
//             j++;
//         }
//     }
// }


// CodeStudio
// Pair sum
//  vector<vector<int>> pairSum(vector<int> &arr, int s){
//     vector< vector<int> > ans;
    
//     for(int i=0;i<arr.size();i++){
        
//         for(int j=(i+1);j<arr.size();j++){
//             if( arr[i] + arr[j] == s){
                
//                 vector<int> temp;
//                 temp.push_back(min(arr[i],arr[j]));
//                 temp.push_back(max(arr[i],arr[j]));
//                 ans.push_back(temp);
                
//             }   
//         }
//     }
//      sort(ans.begin(),ans.end());
//      return ans;
     
     
        
// }



// Leetcode
// 852
// class Solution {
// public:
//     int peakIndexInMountainArray(vector<int>& arr) {
//         int s=0;
        
//         int e=arr.size()-1;
        
//         int mid=s+(e-s)/2;
        
//         while(s<e){
            
//             if(arr[mid]<arr[mid+1]){
                
//                 s=mid+1;
                
//             }
//             else{
                
//                 e=mid;
                
//             }
//             mid=s+(e-s)/2;
//         }
        
//         return s;
        
//     }
// };


// Codestudio
// Search In Rotated Sorted Array
// int getPivot(int arr[],int n){
//     int s=0,e=n-1;
//     // int mid=(s+e)/2;
//     int mid=s+(e-s)/2;
//     while(s<e)
//     {
//         if(arr[mid]>=arr[0]){
//             s=mid+1;
//         }
//         else{
//             e=mid;
//         }
//         // if s is (2^31)-1 if we add the value might get out of range
//         // mid=(s+e)/2;
//         mid=s+(e-s)/2;
//     }
//     return s;
// }
// int binsearch(int arr[],int start,int end,int k){
//     int s=start,e=end;
//     // int mid=(s+e)/2;
//     int mid=s+(e-s)/2;
//     while(s<=e)
//     {
//         if(arr[mid]==k){
//             return mid;
//         }
//         else if(arr[mid]<k){
//             s=mid+1;
//         }
//         else{
//             e=mid-1;
//         }
//         // if s is (2^31)-1 if we add the value might get out of range
//         // mid=(s+e)/2;
//         mid=s+(e-s)/2;
//     }
//     return -1;
// }
// int search(int* arr, int n, int key) {
//     // Write your code here.
//     int pivot=getPivot(arr,n);
//     if(key>=arr[pivot] && key<=arr[n-1]){
//         return binsearch(arr,pivot,n-1,key);
//     }else
//     {
//         return binsearch(arr,0,pivot-1,key);
//     }
    
// }


// Leetcode
// 69
// class Solution {
// public:
//     long long int binary(int n){
//     int s=0;
//     int e=n;
//     // int mid=(s+e)/2;
//     long long int mid=s+(e-s)/2;
//     long long int ans=-1;
//     while(s<=e)
//     {
//         long long int square=mid*mid;
// //         mid*mid can go beyond range of int
//         if(square==n){
//             return mid;
//         }
//         else if(n<square){
//             e=mid-1;
//         }
//         else if(square<n){
//             ans=mid;
//             s=mid+1;
//         }
//         // if s is (2^31)-1 if we add the value might get out of range
//         // mid=(s+e)/2;
//         mid=s+(e-s)/2;
//     }
//     return ans;
// }
// double moreprecise(int n,int decimal,int tmpsol){
//     double factor=1;
//     double ans=tmpsol;
//     for(int i=0;i<decimal;i++){
//         factor=factor/10;
//         // 0.1,0.01
//         for(double j=ans;j*j<n;j=j+factor){
//             ans=j;
//         }
//     }
// }
// int mySqrt(int x) {
//     x=10;
//     int tmpsol=binary(x);
//     cout<<"Answer is"<<moreprecise(n,3,tmpsol);
        
        
//     }
// };



// Leetcode
// 283
// class Solution {
// public:
//     void moveZeroes(vector<int>& nums) {
//         int nonzero=0;
//         for(int j=0;j<nums.size();j++){
//             while(nums[j]!=0){
//                 swap(nums[j],nums[nonzero]);
//                 nonzero++;
//             }
//         }
        
//     }
// };


// leetcode
// 189
// class Solution {
// public:
//     void rotate(vector<int>& nums, int k) {
    // temp to avoid overwrite
//         vector<int> temp(nums.size());
//         for(int i=0;i<nums.size();i++){
//             temp[(i+k)%nums.size()]=nums[i];
//         }
//         nums=temp;
//     }
// };

// 1752
// class Solution {
// public:
//     bool check(vector<int>& nums) {
//         int c=0;
//         for(int i=1;i<nums.size();i++){
//             if(nums[i-1]>nums[i]){
//                 c++;
//             }
//         }
//         if(nums[nums.size()-1]>nums[0]){
//             c++;
//         }
//         return c<=1;
//     }
// };


// codestudio
// Sum of two arrays
// vector<int> reverse(vector<int> arr){
//     int start=0;
//     int end=arr.size()-1;
//     // swap and inc/dec
//     while(start<=end){
//         swap(arr[start],arr[end]);
//         start++;
//         end--;
//     }
//     return arr;
// }
// vector<int> findArraySum(vector<int>&a, int n, vector<int>&b, int m) {
// 	// Write your code here.
//     int i=n-1;
//     int j=m-1;
//     int carry=0;
//     vector<int> ans;
//     while(i>=0&&j>=0){
//         int v1=a[i];
//         int v2=b[j];
//         int sum=v1+v2+carry;
//         carry=sum/10;
//         sum=sum%10;
//         ans.push_back(sum);
//         i--;
//         j--;
        
//     }
//     while(i>=0){
//         int sum=a[i]+carry;
//         carry=sum/10;
//         sum=sum%10;
//         ans.push_back(sum);
//         i--;
//     }
//     while(j>=0){
//         int sum=b[j]+carry;
//         carry=sum/10;
//         sum=sum%10;
//         ans.push_back(sum);
//         j--;
//     }
//     while(carry!=0){
//         int sum=carry;
//         carry=sum/10;
//         sum=sum%10;
//         ans.push_back(sum);
        
//     }
//     return reverse(ans);
// //     return ans1;
// }


// Leetcode
// 125
// class Solution {
// public:
//     bool checkPalindrome(string str) {
//     // Write your code here
//     int st=0;
//     int n=str.length();
//     int e=n-1;
//     while(st<=e){
//         if(str[st]==str[e]){
//             st++;
//             e--;
//         }
//         else{
//             return 0;
//         }
//     }
//     return 1;
// }
//     char toLowerCase(char ch){
//     if((ch>='a'&&ch<='z')||(ch>='0'&&ch<=9)){
//         return ch;}
//     else{
//             char temp=ch-'A'+'a';
//             return temp;
//         }
    
// }
//     bool valid(char ch){
//         if((ch>='a' && ch<='z')||(ch>='A' && ch<='Z')||(ch>='0' && ch<='9')){
//             return 1;
//         }
//         return 0;
//     }
//     bool isPalindrome(string s) {
// //         remove extra characters
//         string temp="";
//             for(int j=0;j<s.length();j++){
//                 if(valid(s[j])){
//                     temp.push_back(s[j]);
//                 }
//             }
// //         lower case
//         for(int j=0;j<=temp.length();j++){
//             temp[j]=toLowerCase(temp[j]);
//         }
//         cout<<temp;
//         return checkPalindrome(temp);
        
//     }
// };



// codestudio
// replace spaces
// string replaceSpaces(string &str){
//     string temp="";
//     for(int i=0;i<str.length();i++){
//         if(str[i]==' '){
//             temp.push_back('@');
//             temp.push_back('4');
//             temp.push_back('0');
//         }
//         else{
//             temp.push_back(str[i]);
            
//         }
//     }
//     return temp;
// 	// Write your code here.
// }


// leetcode
// 1910
// class Solution {
// public:
//     string removeOccurrences(string s, string part) {
//         while(s.length()!=0&&s.find(part)<s.length()){
//             s.erase(s.find(part),part.length());
//         }
//         return s;
//     }
// };

// 567
// class Solution {
// public:
//     bool countequal(int a[],int b[]){
//         for(int i=0;i<26;i++){
//             if(a[i]!=b[i])
//                 return 0;
//         }
//         return 1;
//     }
//     bool checkInclusion(string s1, string s2) {
//         int count1[26]={0};
//         for(int i=0;i<s1.length();i++){
//             int index=s1[i]-'a';
//             count1[index]++;
//         }
//         int i=0;
//         int windsize=s1.length();
//         int count2[26]={0};
//         while(i<windsize&&i<s2.length()){
//             int index=s2[i]-'a';
//             count2[index]++;
//             i++;
            
//         }
//         if(countequal(count1,count2))
//             return 1;
        
//         while(i<s2.length()){
//             char newch=s2[i];
//             int index=newch-'a';
//             count2[index]++;
//             char oldch=s2[i-windsize];
//             index=oldch-'a';
//             count2[index]--;
//             i++;
//             if(countequal(count1,count2))
//                 return 1;
//         }
//         return 0;
//     }
// };


// leetcode
// 1047
// class Solution {
// public:
//     string removeDuplicates(string s) {
//         int n1=0,n2=0,j=s.length()-1;
//         while(j>0){
//             for(int i=0;i<s.length()-1;i++){
//             int n1=s[i]-'a';
//             int n2=s[i+1]-'a';
//             if(n1==n2){
//                 s.erase(n1,2);
//             }
//             j--;
        
//         }
            
//         }
        
//         return s;
//     }
// };


// 443
// class Solution {
// public:
//     int compress(vector<char>& chars) {
//         int i=0;
//         int ansindex=0;
//         int n=chars.size();
//         while(i<n){
//             int j=i+1;
//             while(j<n && chars[i]==chars[j]){
//                 j++;
//             }
//             chars[ansindex++]=chars[i];
//             int count=j-i;
//             if(count >1){
//                 string cnt=to_string(count);
//                 for(char ch:cnt){
//                     chars[ansindex++]=ch;
//                 }
//             }
// //             moving to new character
//             i=j;
//         }
//         return ansindex;
//     }
// };